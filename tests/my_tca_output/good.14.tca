# Matthew Wein's Compiler
  val_copy 18 regH
  store 10018 0
### Converting: val_copy 0 s4 
  val_copy 0 regB
  store regB 4
### Converting: val_copy s4 s3 
  load 4 regA
  val_copy regA regB
  store regB 3
while_start_0: 
### Converting: val_copy 25 s5 
  val_copy 25 regB
  store regB 5
### Converting: test_less s3 s5 s6 
  load 3 regA
  load 5 regB
  test_less regA regB regC
  store regC 6
### Converting: jump_if_0 s6 while_end_1 
  load 6 regA
  jump_if_0 regA while_end_1
### Converting: val_copy 1 s7 
  val_copy 1 regB
  store regB 7
### Converting: add s3 s7 s8 
  load 3 regA
  load 7 regB
  add regA regB regC
  store regC 8
### Converting: val_copy s8 s3 
  load 8 regA
  val_copy regA regB
  store regB 3
### Converting: val_copy s3 s2 
  load 3 regA
  val_copy regA regB
  store regB 2
### Converting: push function_return_2 
  store function_return_2 regH
  add regH 1 regH
### Converting: jump function_Sum 
  jump function_Sum
function_return_2: 
### Converting: val_copy s1 s9 
  load 1 regA
  val_copy regA regB
  store regB 9
### Converting: out_int s9 
  load 9 regA
  out_int regA
### Converting: out_char '\n'           # End print statements with a newline.
  out_char '\n'
### Converting: jump while_start_0 
  jump while_start_0
while_end_1: 
### Converting: nop 
  nop 
### Converting: nop 
  nop 
### Converting: nop                     # ============ FUNCTIONS ============
  nop 
### Converting: jump define_functions_end # Skip over function defs during normal execution
  jump define_functions_end
### Converting: nop 
  nop 
### Converting: nop                     # FUNCTION: Sum
  nop 
function_Sum: 
### Converting: val_copy 0 s11 
  val_copy 0 regB
  store regB 11
### Converting: test_lte s2 s11 s12 
  load 2 regA
  load 11 regB
  test_lte regA regB regC
  store regC 12
### Converting: jump_if_0 s12 if_else_3 
  load 12 regA
  jump_if_0 regA if_else_3
### Converting: val_copy 0 s13 
  val_copy 0 regB
  store regB 13
### Converting: val_copy s13 s1 
  load 13 regA
  val_copy regA regB
  store regB 1
### Converting: jump if_end_4 
  jump if_end_4
if_else_3: 
if_end_4: 
### Converting: val_copy 1 s14 
  val_copy 1 regB
  store regB 14
### Converting: sub s2 s14 s15 
  load 2 regA
  load 14 regB
  sub regA regB regC
  store regC 15
### Converting: val_copy s15 s2 
  load 15 regA
  val_copy regA regB
  store regB 2
### Converting: push function_return_5 
  store function_return_5 regH
  add regH 1 regH
### Converting: jump function_Sum 
  jump function_Sum
function_return_5: 
### Converting: val_copy s1 s16 
  load 1 regA
  val_copy regA regB
  store regB 16
### Converting: add s2 s16 s17 
  load 2 regA
  load 16 regB
  add regA regB regC
  store regC 17
### Converting: val_copy s17 s1 
  load 17 regA
  val_copy regA regB
  store regB 1
### Converting: pop s10 
  sub regH 1 regH                       # Decrement stack to prev mem position
  load regH regA                        # Load stored value from the stack.
  store regA 10
### Converting: jump s10 
  load 10 regA
  jump regA
define_functions_end: 
