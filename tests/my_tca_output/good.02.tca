# Matthew Wein's Compiler
  val_copy 8 regH
  store 10008 0
### Converting: val_copy 'c' s4 
  val_copy 'c' regB
  store regB 4
### Converting: val_copy s4 s2 
  load 4 regA
  val_copy regA regB
  store regB 2
### Converting: val_copy 'c' s5 
  val_copy 'c' regB
  store regB 5
### Converting: val_copy s5 s3 
  load 5 regA
  val_copy regA regB
  store regB 3
### Converting: push function_return_0 
  store function_return_0 regH
  add regH 1 regH
### Converting: jump function_Add 
  jump function_Add
function_return_0: 
### Converting: val_copy s1 s6 
  load 1 regA
  val_copy regA regB
  store regB 6
### Converting: nop 
  nop 
### Converting: nop 
  nop 
### Converting: nop                     # ============ FUNCTIONS ============
  nop 
### Converting: jump define_functions_end # Skip over function defs during normal execution
  jump define_functions_end
### Converting: nop 
  nop 
### Converting: nop                     # FUNCTION: Add
  nop 
function_Add: 
### Converting: val_copy s3 s1 
  load 3 regA
  val_copy regA regB
  store regB 1
### Converting: pop s7 
  sub regH 1 regH                       # Decrement stack to prev mem position
  load regH regA                        # Load stored value from the stack.
  store regA 7
### Converting: jump s7 
  load 7 regA
  jump regA
define_functions_end: 
