# Matthew Wein's Compiler
  val_copy 13 regH
  store 10013 0
### Converting: val_copy 16 s4 
  val_copy 16 regB
  store regB 4
### Converting: val_copy s4 s3 
  load 4 regA
  val_copy regA regB
  store regB 3
### Converting: val_copy 21 s5 
  val_copy 21 regB
  store regB 5
### Converting: val_copy 3 s6 
  val_copy 3 regB
  store regB 6
### Converting: mod s3 s6 s7 
  load 3 regA
  load 6 regB
  mod regA regB regC
  store regC 7
### Converting: add s5 s7 s8 
  load 5 regA
  load 7 regB
  add regA regB regC
  store regC 8
### Converting: val_copy s8 s2 
  load 8 regA
  val_copy regA regB
  store regB 2
### Converting: push function_return_0 
  store function_return_0 regH
  add regH 1 regH
### Converting: jump function_Good 
  jump function_Good
function_return_0: 
### Converting: val_copy s1 s9 
  load 1 regA
  val_copy regA regB
  store regB 9
### Converting: out_int s9 
  load 9 regA
  out_int regA
### Converting: out_char '\n'           # End print statements with a newline.
  out_char '\n'
### Converting: nop 
  nop 
### Converting: nop 
  nop 
### Converting: nop                     # ============ FUNCTIONS ============
  nop 
### Converting: jump define_functions_end # Skip over function defs during normal execution
  jump define_functions_end
### Converting: nop 
  nop 
### Converting: nop                     # FUNCTION: Good
  nop 
function_Good: 
### Converting: val_copy 2 s11 
  val_copy 2 regB
  store regB 11
### Converting: mod s2 s11 s12 
  load 2 regA
  load 11 regB
  mod regA regB regC
  store regC 12
### Converting: val_copy s12 s1 
  load 12 regA
  val_copy regA regB
  store regB 1
### Converting: pop s10 
  sub regH 1 regH                       # Decrement stack to prev mem position
  load regH regA                        # Load stored value from the stack.
  store regA 10
### Converting: jump s10 
  load 10 regA
  jump regA
define_functions_end: 
