# Matthew Wein's Compiler
  val_copy 54 regH
  store 10054 0
### Converting: ar_set_siz a11 13 
  load 11 regA
  val_copy 13 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_0
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_0
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_2
ar_resize_do_copy_0:
  load 0 regD                           # Set regD = free mem position
  store regD 11
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_1:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_2
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_1
ar_resize_end_2:
### Converting: ar_set_idx a11 0 'A' 
  load 11 regA
  val_copy 0 regB
  val_copy 'A' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a11 1 'l' 
  load 11 regA
  val_copy 1 regB
  val_copy 'l' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a11 2 'p' 
  load 11 regA
  val_copy 2 regB
  val_copy 'p' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a11 3 'h' 
  load 11 regA
  val_copy 3 regB
  val_copy 'h' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a11 4 'a' 
  load 11 regA
  val_copy 4 regB
  val_copy 'a' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a11 5 'b' 
  load 11 regA
  val_copy 5 regB
  val_copy 'b' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a11 6 'e' 
  load 11 regA
  val_copy 6 regB
  val_copy 'e' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a11 7 't' 
  load 11 regA
  val_copy 7 regB
  val_copy 't' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a11 8 ' ' 
  load 11 regA
  val_copy 8 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a11 9 's' 
  load 11 regA
  val_copy 9 regB
  val_copy 's' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a11 10 'o' 
  load 11 regA
  val_copy 10 regB
  val_copy 'o' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a11 11 'u' 
  load 11 regA
  val_copy 11 regB
  val_copy 'u' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a11 12 'p' 
  load 11 regA
  val_copy 12 regB
  val_copy 'p' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 0 s13          # Init loop variable for copying array.
  val_copy 0 regB
  store regB 13
### Converting: ar_get_siz a11 s12      # Save size of RHS array into variable.
  load 11 regA
  load regA regB
  store regB 12
### Converting: ar_set_siz a9 s12       # Make LHS same size as RHS.
  load 9 regA
  load 12 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_3
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_3
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_5
ar_resize_do_copy_3:
  load 0 regD                           # Set regD = free mem position
  store regD 9
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_4:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_5
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_4
ar_resize_end_5:
copy_array_start_0: 
### Converting: test_equ s13 s12 s14    # Test if we are finished yet...
  load 13 regA
  load 12 regB
  test_equ regA regB regC
  store regC 14
### Converting: jump_if_n0 s14 copy_array_end_1 #  ...and jump if we are.
  load 14 regA
  jump_if_n0 regA copy_array_end_1
### Converting: ar_get_idx a11 s13 s14  # Collect the value at next index.
  load 11 regA
  load 13 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 14
### Converting: ar_set_idx a9 s13 s14   # Write this entry to the LHS!
  load 9 regA
  load 13 regB
  load 14 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: add s13 1 s13           # Increment to the next index.
  load 13 regA
  add regA 1 regC
  store regC 13
### Converting: jump copy_array_start_0 #  ...and jump if not.
  jump copy_array_start_0
copy_array_end_1: 
### Converting: val_copy s9 s2 
  load 9 regA
  val_copy regA regB
  store regB 2
### Converting: val_copy s9 s3 
  load 9 regA
  val_copy regA regB
  store regB 3
### Converting: push function_return_2 
  store function_return_2 regH
  add regH 1 regH
### Converting: jump function_Remove 
  jump function_Remove
function_return_2: 
### Converting: val_copy s1 s15 
  load 1 regA
  val_copy regA regB
  store regB 15
### Converting: val_copy 0 s17          # Init loop variable for copying array.
  val_copy 0 regB
  store regB 17
### Converting: ar_get_siz a15 s16      # Save size of RHS array into variable.
  load 15 regA
  load regA regB
  store regB 16
### Converting: ar_set_siz a10 s16      # Make LHS same size as RHS.
  load 10 regA
  load 16 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_6
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_6
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_8
ar_resize_do_copy_6:
  load 0 regD                           # Set regD = free mem position
  store regD 10
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_7:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_8
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_7
ar_resize_end_8:
copy_array_start_3: 
### Converting: test_equ s17 s16 s18    # Test if we are finished yet...
  load 17 regA
  load 16 regB
  test_equ regA regB regC
  store regC 18
### Converting: jump_if_n0 s18 copy_array_end_4 #  ...and jump if we are.
  load 18 regA
  jump_if_n0 regA copy_array_end_4
### Converting: ar_get_idx a15 s17 s18  # Collect the value at next index.
  load 15 regA
  load 17 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 18
### Converting: ar_set_idx a10 s17 s18  # Write this entry to the LHS!
  load 10 regA
  load 17 regB
  load 18 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: add s17 1 s17           # Increment to the next index.
  load 17 regA
  add regA 1 regC
  store regC 17
### Converting: jump copy_array_start_3 #  ...and jump if not.
  jump copy_array_start_3
copy_array_end_4: 
### Converting: val_copy 0 s20          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 20
### Converting: ar_get_siz a9 s19       # Save size of array into variable.
  load 9 regA
  load regA regB
  store regB 19
print_array_start_5: 
### Converting: test_gte s20 s19 s21    # Test if we are finished yet...
  load 20 regA
  load 19 regB
  test_gte regA regB regC
  store regC 21
### Converting: jump_if_n0 s21 print_array_end_6 #  ...and jump to end if so.
  load 21 regA
  jump_if_n0 regA print_array_end_6
### Converting: ar_get_idx a9 s20 s21   # Collect the value at the next index.
  load 9 regA
  load 20 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 21
### Converting: out_char s21            # Print this entry!
  load 21 regA
  out_char regA
### Converting: add s20 1 s20           # Increment to the next index.
  load 20 regA
  add regA 1 regC
  store regC 20
### Converting: jump print_array_start_5 
  jump print_array_start_5
print_array_end_6: 
### Converting: ar_set_siz a22 3 
  load 22 regA
  val_copy 3 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_9
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_9
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_11
ar_resize_do_copy_9:
  load 0 regD                           # Set regD = free mem position
  store regD 22
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_10:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_11
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_10
ar_resize_end_11:
### Converting: ar_set_idx a22 0 ' ' 
  load 22 regA
  val_copy 0 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 1 ' ' 
  load 22 regA
  val_copy 1 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 2 ' ' 
  load 22 regA
  val_copy 2 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 0 s24          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 24
### Converting: ar_get_siz a22 s23      # Save size of array into variable.
  load 22 regA
  load regA regB
  store regB 23
print_array_start_7: 
### Converting: test_gte s24 s23 s25    # Test if we are finished yet...
  load 24 regA
  load 23 regB
  test_gte regA regB regC
  store regC 25
### Converting: jump_if_n0 s25 print_array_end_8 #  ...and jump to end if so.
  load 25 regA
  jump_if_n0 regA print_array_end_8
### Converting: ar_get_idx a22 s24 s25  # Collect the value at the next index.
  load 22 regA
  load 24 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 25
### Converting: out_char s25            # Print this entry!
  load 25 regA
  out_char regA
### Converting: add s24 1 s24           # Increment to the next index.
  load 24 regA
  add regA 1 regC
  store regC 24
### Converting: jump print_array_start_7 
  jump print_array_start_7
print_array_end_8: 
### Converting: val_copy 0 s27          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 27
### Converting: ar_get_siz a10 s26      # Save size of array into variable.
  load 10 regA
  load regA regB
  store regB 26
print_array_start_9: 
### Converting: test_gte s27 s26 s28    # Test if we are finished yet...
  load 27 regA
  load 26 regB
  test_gte regA regB regC
  store regC 28
### Converting: jump_if_n0 s28 print_array_end_10 #  ...and jump to end if so.
  load 28 regA
  jump_if_n0 regA print_array_end_10
### Converting: ar_get_idx a10 s27 s28  # Collect the value at the next index.
  load 10 regA
  load 27 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 28
### Converting: out_char s28            # Print this entry!
  load 28 regA
  out_char regA
### Converting: add s27 1 s27           # Increment to the next index.
  load 27 regA
  add regA 1 regC
  store regC 27
### Converting: jump print_array_start_9 
  jump print_array_start_9
print_array_end_10: 
### Converting: out_char '\n'           # End print statements with a newline.
  out_char '\n'
### Converting: nop 
  nop 
### Converting: nop 
  nop 
### Converting: nop                     # ============ FUNCTIONS ============
  nop 
### Converting: jump define_functions_end # Skip over function defs during normal execution
  jump define_functions_end
### Converting: nop 
  nop 
### Converting: nop                     # FUNCTION: Remove
  nop 
function_Remove: 
### Converting: val_copy 0 s30 
  val_copy 0 regB
  store regB 30
### Converting: val_copy s30 s4 
  load 30 regA
  val_copy regA regB
  store regB 4
while_start_11: 
### Converting: ar_get_siz a3 s31 
  load 3 regA
  load regA regB
  store regB 31
### Converting: test_less s4 s31 s32 
  load 4 regA
  load 31 regB
  test_less regA regB regC
  store regC 32
### Converting: jump_if_0 s32 while_end_12 
  load 32 regA
  jump_if_0 regA while_end_12
### Converting: ar_get_idx a3 s4 s33 
  load 3 regA
  load 4 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 33
### Converting: val_copy s33 s5 
  load 33 regA
  val_copy regA regB
  store regB 5
### Converting: val_copy 0 s34 
  val_copy 0 regB
  store regB 34
### Converting: val_copy s34 s6 
  load 34 regA
  val_copy regA regB
  store regB 6
### Converting: val_copy 0 s35 
  val_copy 0 regB
  store regB 35
### Converting: val_copy s35 s7 
  load 35 regA
  val_copy regA regB
  store regB 7
while_start_13: 
### Converting: ar_get_siz a2 s36 
  load 2 regA
  load regA regB
  store regB 36
### Converting: test_less s6 s36 s37 
  load 6 regA
  load 36 regB
  test_less regA regB regC
  store regC 37
### Converting: jump_if_0 s37 while_end_14 
  load 37 regA
  jump_if_0 regA while_end_14
### Converting: ar_get_idx a2 s6 s38 
  load 2 regA
  load 6 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 38
### Converting: test_nequ s38 s5 s39 
  load 38 regA
  load 5 regB
  test_nequ regA regB regC
  store regC 39
### Converting: jump_if_0 s39 if_else_15 
  load 39 regA
  jump_if_0 regA if_else_15
### Converting: val_copy 1 s41 
  val_copy 1 regB
  store regB 41
### Converting: add s7 s41 s42 
  load 7 regA
  load 41 regB
  add regA regB regC
  store regC 42
### Converting: ar_set_siz a8 s42 
  load 8 regA
  load 42 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_12
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_12
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_14
ar_resize_do_copy_12:
  load 0 regD                           # Set regD = free mem position
  store regD 8
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_13:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_14
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_13
ar_resize_end_14:
### Converting: ar_get_idx a8 s7 s43 
  load 8 regA
  load 7 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 43
### Converting: ar_get_idx a2 s6 s44 
  load 2 regA
  load 6 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 44
### Converting: ar_set_idx a8 s7 s44 
  load 8 regA
  load 7 regB
  load 44 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 1 s45 
  val_copy 1 regB
  store regB 45
### Converting: add s7 s45 s46 
  load 7 regA
  load 45 regB
  add regA regB regC
  store regC 46
### Converting: val_copy s46 s7 
  load 46 regA
  val_copy regA regB
  store regB 7
### Converting: jump if_end_16 
  jump if_end_16
if_else_15: 
if_end_16: 
### Converting: val_copy 1 s47 
  val_copy 1 regB
  store regB 47
### Converting: add s6 s47 s48 
  load 6 regA
  load 47 regB
  add regA regB regC
  store regC 48
### Converting: val_copy s48 s6 
  load 48 regA
  val_copy regA regB
  store regB 6
### Converting: jump while_start_13 
  jump while_start_13
while_end_14: 
### Converting: val_copy 0 s50          # Init loop variable for copying array.
  val_copy 0 regB
  store regB 50
### Converting: ar_get_siz a8 s49       # Save size of RHS array into variable.
  load 8 regA
  load regA regB
  store regB 49
### Converting: ar_set_siz a2 s49       # Make LHS same size as RHS.
  load 2 regA
  load 49 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_15
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_15
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_17
ar_resize_do_copy_15:
  load 0 regD                           # Set regD = free mem position
  store regD 2
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_16:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_17
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_16
ar_resize_end_17:
copy_array_start_17: 
### Converting: test_equ s50 s49 s51    # Test if we are finished yet...
  load 50 regA
  load 49 regB
  test_equ regA regB regC
  store regC 51
### Converting: jump_if_n0 s51 copy_array_end_18 #  ...and jump if we are.
  load 51 regA
  jump_if_n0 regA copy_array_end_18
### Converting: ar_get_idx a8 s50 s51   # Collect the value at next index.
  load 8 regA
  load 50 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 51
### Converting: ar_set_idx a2 s50 s51   # Write this entry to the LHS!
  load 2 regA
  load 50 regB
  load 51 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: add s50 1 s50           # Increment to the next index.
  load 50 regA
  add regA 1 regC
  store regC 50
### Converting: jump copy_array_start_17 #  ...and jump if not.
  jump copy_array_start_17
copy_array_end_18: 
### Converting: val_copy 1 s52 
  val_copy 1 regB
  store regB 52
### Converting: add s4 s52 s53 
  load 4 regA
  load 52 regB
  add regA regB regC
  store regC 53
### Converting: val_copy s53 s4 
  load 53 regA
  val_copy regA regB
  store regB 4
### Converting: jump while_start_11 
  jump while_start_11
while_end_12: 
### Converting: val_copy s2 s1 
  load 2 regA
  val_copy regA regB
  store regB 1
### Converting: pop s29 
  sub regH 1 regH                       # Decrement stack to prev mem position
  load regH regA                        # Load stored value from the stack.
  store regA 29
### Converting: jump s29 
  load 29 regA
  jump regA
define_functions_end: 
