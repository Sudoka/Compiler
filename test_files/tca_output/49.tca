  store 40 0
### Converting: ar_set_siz a5 19 
  load 5 regA
  val_copy 19 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_0
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_0
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_2
ar_resize_do_copy_0:
  load 0 regD                           # Set regD = free mem position
  store regD 5
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_1:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_2
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_1
ar_resize_end_2:
### Converting: ar_set_idx a5 0 'T' 
  load 5 regA
  val_copy 0 regB
  val_copy 'T' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 1 'h' 
  load 5 regA
  val_copy 1 regB
  val_copy 'h' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 2 'i' 
  load 5 regA
  val_copy 2 regB
  val_copy 'i' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 3 's' 
  load 5 regA
  val_copy 3 regB
  val_copy 's' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 4 ' ' 
  load 5 regA
  val_copy 4 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 5 'i' 
  load 5 regA
  val_copy 5 regB
  val_copy 'i' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 6 's' 
  load 5 regA
  val_copy 6 regB
  val_copy 's' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 7 ' ' 
  load 5 regA
  val_copy 7 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 8 'a' 
  load 5 regA
  val_copy 8 regB
  val_copy 'a' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 9 ' ' 
  load 5 regA
  val_copy 9 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 10 't' 
  load 5 regA
  val_copy 10 regB
  val_copy 't' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 11 'w' 
  load 5 regA
  val_copy 11 regB
  val_copy 'w' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 12 'o' 
  load 5 regA
  val_copy 12 regB
  val_copy 'o' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 13 '-' 
  load 5 regA
  val_copy 13 regB
  val_copy '-' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 14 'p' 
  load 5 regA
  val_copy 14 regB
  val_copy 'p' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 15 'a' 
  load 5 regA
  val_copy 15 regB
  val_copy 'a' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 16 'r' 
  load 5 regA
  val_copy 16 regB
  val_copy 'r' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 17 't' 
  load 5 regA
  val_copy 17 regB
  val_copy 't' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 18 ' ' 
  load 5 regA
  val_copy 18 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 0 s7           # Init loop variable for copying array.
  val_copy 0 regB
  store regB 7
### Converting: ar_get_siz a5 s6        # Save size of RHS array into variable.
  load 5 regA
  load regA regB
  store regB 6
### Converting: ar_set_siz a1 s6        # Make LHS same size as RHS.
  load 1 regA
  load 6 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_3
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_3
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_5
ar_resize_do_copy_3:
  load 0 regD                           # Set regD = free mem position
  store regD 1
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_4:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_5
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_4
ar_resize_end_5:
copy_array_start_0: 
### Converting: test_equ s7 s6 s8       # Test if we are finished yet...
  load 7 regA
  load 6 regB
  test_equ regA regB regC
  store regC 8
### Converting: jump_if_n0 s8 copy_array_end_1 #  ...and jump if we are.
  load 8 regA
  jump_if_n0 regA copy_array_end_1
### Converting: ar_get_idx a5 s7 s8     # Collect the value at next index.
  load 5 regA
  load 7 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 8
### Converting: ar_set_idx a1 s7 s8     # Write this entry to the LHS!
  load 1 regA
  load 7 regB
  load 8 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: add s7 1 s7             # Increment to the next index.
  load 7 regA
  add regA 1 regC
  store regC 7
### Converting: jump copy_array_start_0 #  ...and jump if not.
  jump copy_array_start_0
copy_array_end_1: 
### Converting: ar_set_siz a9 9 
  load 9 regA
  val_copy 9 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_6
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_6
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_8
ar_resize_do_copy_6:
  load 0 regD                           # Set regD = free mem position
  store regD 9
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_7:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_8
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_7
ar_resize_end_8:
### Converting: ar_set_idx a9 0 's' 
  load 9 regA
  val_copy 0 regB
  val_copy 's' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 1 'e' 
  load 9 regA
  val_copy 1 regB
  val_copy 'e' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 2 'n' 
  load 9 regA
  val_copy 2 regB
  val_copy 'n' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 3 't' 
  load 9 regA
  val_copy 3 regB
  val_copy 't' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 4 'e' 
  load 9 regA
  val_copy 4 regB
  val_copy 'e' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 5 'n' 
  load 9 regA
  val_copy 5 regB
  val_copy 'n' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 6 'c' 
  load 9 regA
  val_copy 6 regB
  val_copy 'c' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 7 'e' 
  load 9 regA
  val_copy 7 regB
  val_copy 'e' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 8 '.' 
  load 9 regA
  val_copy 8 regB
  val_copy '.' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 0 s11          # Init loop variable for copying array.
  val_copy 0 regB
  store regB 11
### Converting: ar_get_siz a9 s10       # Save size of RHS array into variable.
  load 9 regA
  load regA regB
  store regB 10
### Converting: ar_set_siz a2 s10       # Make LHS same size as RHS.
  load 2 regA
  load 10 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_9
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_9
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_11
ar_resize_do_copy_9:
  load 0 regD                           # Set regD = free mem position
  store regD 2
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_10:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_11
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_10
ar_resize_end_11:
copy_array_start_2: 
### Converting: test_equ s11 s10 s12    # Test if we are finished yet...
  load 11 regA
  load 10 regB
  test_equ regA regB regC
  store regC 12
### Converting: jump_if_n0 s12 copy_array_end_3 #  ...and jump if we are.
  load 12 regA
  jump_if_n0 regA copy_array_end_3
### Converting: ar_get_idx a9 s11 s12   # Collect the value at next index.
  load 9 regA
  load 11 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 12
### Converting: ar_set_idx a2 s11 s12   # Write this entry to the LHS!
  load 2 regA
  load 11 regB
  load 12 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: add s11 1 s11           # Increment to the next index.
  load 11 regA
  add regA 1 regC
  store regC 11
### Converting: jump copy_array_start_2 #  ...and jump if not.
  jump copy_array_start_2
copy_array_end_3: 
### Converting: ar_set_siz a13 0 
  load 13 regA
  val_copy 0 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_12
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_12
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_14
ar_resize_do_copy_12:
  load 0 regD                           # Set regD = free mem position
  store regD 13
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_13:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_14
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_13
ar_resize_end_14:
### Converting: val_copy 0 s15          # Init loop variable for copying array.
  val_copy 0 regB
  store regB 15
### Converting: ar_get_siz a13 s14      # Save size of RHS array into variable.
  load 13 regA
  load regA regB
  store regB 14
### Converting: ar_set_siz a3 s14       # Make LHS same size as RHS.
  load 3 regA
  load 14 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_15
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_15
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_17
ar_resize_do_copy_15:
  load 0 regD                           # Set regD = free mem position
  store regD 3
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_16:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_17
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_16
ar_resize_end_17:
copy_array_start_4: 
### Converting: test_equ s15 s14 s16    # Test if we are finished yet...
  load 15 regA
  load 14 regB
  test_equ regA regB regC
  store regC 16
### Converting: jump_if_n0 s16 copy_array_end_5 #  ...and jump if we are.
  load 16 regA
  jump_if_n0 regA copy_array_end_5
### Converting: ar_get_idx a13 s15 s16  # Collect the value at next index.
  load 13 regA
  load 15 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 16
### Converting: ar_set_idx a3 s15 s16   # Write this entry to the LHS!
  load 3 regA
  load 15 regB
  load 16 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: add s15 1 s15           # Increment to the next index.
  load 15 regA
  add regA 1 regC
  store regC 15
### Converting: jump copy_array_start_4 #  ...and jump if not.
  jump copy_array_start_4
copy_array_end_5: 
### Converting: ar_get_siz a1 s18 
  load 1 regA
  load regA regB
  store regB 18
### Converting: ar_get_siz a2 s19 
  load 2 regA
  load regA regB
  store regB 19
### Converting: add s18 s19 s20 
  load 18 regA
  load 19 regB
  add regA regB regC
  store regC 20
### Converting: ar_set_siz a3 s20 
  load 3 regA
  load 20 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_18
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_18
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_20
ar_resize_do_copy_18:
  load 0 regD                           # Set regD = free mem position
  store regD 3
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_19:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_20
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_19
ar_resize_end_20:
### Converting: val_copy 0 s21 
  val_copy 0 regB
  store regB 21
### Converting: val_copy s21 s4 
  load 21 regA
  val_copy regA regB
  store regB 4
while_start_6: 
### Converting: ar_get_siz a1 s22 
  load 1 regA
  load regA regB
  store regB 22
### Converting: test_less s4 s22 s23 
  load 4 regA
  load 22 regB
  test_less regA regB regC
  store regC 23
### Converting: jump_if_0 s23 while_end_7 
  load 23 regA
  jump_if_0 regA while_end_7
### Converting: ar_get_idx a3 s4 s24 
  load 3 regA
  load 4 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 24
### Converting: ar_get_idx a1 s4 s25 
  load 1 regA
  load 4 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 25
### Converting: ar_set_idx a3 s4 s25 
  load 3 regA
  load 4 regB
  load 25 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 1 s26 
  val_copy 1 regB
  store regB 26
### Converting: add s4 s26 s27 
  load 4 regA
  load 26 regB
  add regA regB regC
  store regC 27
### Converting: val_copy s27 s4 
  load 27 regA
  val_copy regA regB
  store regB 4
### Converting: jump while_start_6 
  jump while_start_6
while_end_7: 
### Converting: val_copy 0 s28 
  val_copy 0 regB
  store regB 28
### Converting: val_copy s28 s4 
  load 28 regA
  val_copy regA regB
  store regB 4
while_start_8: 
### Converting: ar_get_siz a2 s29 
  load 2 regA
  load regA regB
  store regB 29
### Converting: test_less s4 s29 s30 
  load 4 regA
  load 29 regB
  test_less regA regB regC
  store regC 30
### Converting: jump_if_0 s30 while_end_9 
  load 30 regA
  jump_if_0 regA while_end_9
### Converting: ar_get_siz a1 s31 
  load 1 regA
  load regA regB
  store regB 31
### Converting: add s31 s4 s32 
  load 31 regA
  load 4 regB
  add regA regB regC
  store regC 32
### Converting: ar_get_idx a3 s32 s33 
  load 3 regA
  load 32 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 33
### Converting: ar_get_idx a2 s4 s34 
  load 2 regA
  load 4 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 34
### Converting: ar_set_idx a3 s32 s34 
  load 3 regA
  load 32 regB
  load 34 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 1 s35 
  val_copy 1 regB
  store regB 35
### Converting: add s4 s35 s36 
  load 4 regA
  load 35 regB
  add regA regB regC
  store regC 36
### Converting: val_copy s36 s4 
  load 36 regA
  val_copy regA regB
  store regB 4
### Converting: jump while_start_8 
  jump while_start_8
while_end_9: 
### Converting: val_copy 0 s38          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 38
### Converting: ar_get_siz a3 s37       # Save size of array into variable.
  load 3 regA
  load regA regB
  store regB 37
print_array_start_10: 
### Converting: test_gte s38 s37 s39    # Test if we are finished yet...
  load 38 regA
  load 37 regB
  test_gte regA regB regC
  store regC 39
### Converting: jump_if_n0 s39 print_array_end_11 #  ...and jump to end if so.
  load 39 regA
  jump_if_n0 regA print_array_end_11
### Converting: ar_get_idx a3 s38 s39   # Collect the value at the next index.
  load 3 regA
  load 38 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 39
### Converting: out_char s39            # Print this entry!
  load 39 regA
  out_char regA
### Converting: add s38 1 s38           # Increment to the next index.
  load 38 regA
  add regA 1 regC
  store regC 38
### Converting: jump print_array_start_10 
  jump print_array_start_10
print_array_end_11: 
### Converting: out_char '\n'           # End print statements with a newline.
  out_char '\n'
