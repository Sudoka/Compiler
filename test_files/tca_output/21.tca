  store 16 0
### Converting: val_copy 60 s4 
  val_copy 60 regB
  store regB 4
### Converting: ar_set_siz a1 s4 
  load 1 regA
  load 4 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_0
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_0
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_2
ar_resize_do_copy_0:
  load 0 regD                           # Set regD = free mem position
  store regD 1
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_1:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_2
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_1
ar_resize_end_2:
### Converting: val_copy 0 s5 
  val_copy 0 regB
  store regB 5
### Converting: val_copy s5 s2 
  load 5 regA
  val_copy regA regB
  store regB 2
while_start_0: 
### Converting: ar_get_siz a1 s6 
  load 1 regA
  load regA regB
  store regB 6
### Converting: test_less s2 s6 s7 
  load 2 regA
  load 6 regB
  test_less regA regB regC
  store regC 7
### Converting: jump_if_0 s7 while_end_1 
  load 7 regA
  jump_if_0 regA while_end_1
### Converting: ar_get_idx a1 s2 s8 
  load 1 regA
  load 2 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 8
### Converting: val_copy 10 s9 
  val_copy 10 regB
  store regB 9
### Converting: random s9 s10 
  load 9 regA
  random regA regB
  store regB 10
### Converting: ar_set_idx a1 s2 s10 
  load 1 regA
  load 2 regB
  load 10 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 1 s11 
  val_copy 1 regB
  store regB 11
### Converting: add s2 s11 s12 
  load 2 regA
  load 11 regB
  add regA regB regC
  store regC 12
### Converting: val_copy s12 s2 
  load 12 regA
  val_copy regA regB
  store regB 2
### Converting: jump while_start_0 
  jump while_start_0
while_end_1: 
### Converting: val_copy 0 s14          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 14
### Converting: ar_get_siz a1 s13       # Save size of array into variable.
  load 1 regA
  load regA regB
  store regB 13
print_array_start_2: 
### Converting: test_gte s14 s13 s15    # Test if we are finished yet...
  load 14 regA
  load 13 regB
  test_gte regA regB regC
  store regC 15
### Converting: jump_if_n0 s15 print_array_end_3 #  ...and jump to end if so.
  load 15 regA
  jump_if_n0 regA print_array_end_3
### Converting: ar_get_idx a1 s14 s15   # Collect the value at the next index.
  load 1 regA
  load 14 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 15
### Converting: out_int s15             # Print this entry!
  load 15 regA
  out_int regA
### Converting: add s14 1 s14           # Increment to the next index.
  load 14 regA
  add regA 1 regC
  store regC 14
### Converting: jump print_array_start_2 
  jump print_array_start_2
print_array_end_3: 
### Converting: out_char '\n'           # End print statements with a newline.
  out_char '\n'
