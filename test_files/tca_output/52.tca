  store 45 0
### Converting: ar_set_siz a5 11 
  load 5 regA
  val_copy 11 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_0
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_0
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_2
ar_resize_do_copy_0:
  load 0 regD                           # Set regD = free mem position
  store regD 5
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_1:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_2
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_1
ar_resize_end_2:
### Converting: ar_set_idx a5 0 'a' 
  load 5 regA
  val_copy 0 regB
  val_copy 'a' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 1 'b' 
  load 5 regA
  val_copy 1 regB
  val_copy 'b' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 2 'c' 
  load 5 regA
  val_copy 2 regB
  val_copy 'c' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 3 ' ' 
  load 5 regA
  val_copy 3 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 4 'D' 
  load 5 regA
  val_copy 4 regB
  val_copy 'D' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 5 '3' 
  load 5 regA
  val_copy 5 regB
  val_copy '3' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 6 'F' 
  load 5 regA
  val_copy 6 regB
  val_copy 'F' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 7 '#' 
  load 5 regA
  val_copy 7 regB
  val_copy '#' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 8 'G' 
  load 5 regA
  val_copy 8 regB
  val_copy 'G' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 9 'H' 
  load 5 regA
  val_copy 9 regB
  val_copy 'H' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a5 10 'I' 
  load 5 regA
  val_copy 10 regB
  val_copy 'I' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 0 s7           # Init loop variable for copying array.
  val_copy 0 regB
  store regB 7
### Converting: ar_get_siz a5 s6        # Save size of RHS array into variable.
  load 5 regA
  load regA regB
  store regB 6
### Converting: ar_set_siz a1 s6        # Make LHS same size as RHS.
  load 1 regA
  load 6 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_3
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_3
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_5
ar_resize_do_copy_3:
  load 0 regD                           # Set regD = free mem position
  store regD 1
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_4:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_5
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_4
ar_resize_end_5:
copy_array_start_0: 
### Converting: test_equ s7 s6 s8       # Test if we are finished yet...
  load 7 regA
  load 6 regB
  test_equ regA regB regC
  store regC 8
### Converting: jump_if_n0 s8 copy_array_end_1 #  ...and jump if we are.
  load 8 regA
  jump_if_n0 regA copy_array_end_1
### Converting: ar_get_idx a5 s7 s8     # Collect the value at next index.
  load 5 regA
  load 7 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 8
### Converting: ar_set_idx a1 s7 s8     # Write this entry to the LHS!
  load 1 regA
  load 7 regB
  load 8 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: add s7 1 s7             # Increment to the next index.
  load 7 regA
  add regA 1 regC
  store regC 7
### Converting: jump copy_array_start_0 #  ...and jump if not.
  jump copy_array_start_0
copy_array_end_1: 
### Converting: ar_set_siz a9 11 
  load 9 regA
  val_copy 11 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_6
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_6
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_8
ar_resize_do_copy_6:
  load 0 regD                           # Set regD = free mem position
  store regD 9
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_7:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_8
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_7
ar_resize_end_8:
### Converting: ar_set_idx a9 0 'A' 
  load 9 regA
  val_copy 0 regB
  val_copy 'A' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 1 'l' 
  load 9 regA
  val_copy 1 regB
  val_copy 'l' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 2 'l' 
  load 9 regA
  val_copy 2 regB
  val_copy 'l' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 3 ' ' 
  load 9 regA
  val_copy 3 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 4 'c' 
  load 9 regA
  val_copy 4 regB
  val_copy 'c' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 5 'h' 
  load 9 regA
  val_copy 5 regB
  val_copy 'h' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 6 'a' 
  load 9 regA
  val_copy 6 regB
  val_copy 'a' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 7 'r' 
  load 9 regA
  val_copy 7 regB
  val_copy 'r' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 8 's' 
  load 9 regA
  val_copy 8 regB
  val_copy 's' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 9 ':' 
  load 9 regA
  val_copy 9 regB
  val_copy ':' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a9 10 ' ' 
  load 9 regA
  val_copy 10 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 0 s11          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 11
### Converting: ar_get_siz a9 s10       # Save size of array into variable.
  load 9 regA
  load regA regB
  store regB 10
print_array_start_2: 
### Converting: test_gte s11 s10 s12    # Test if we are finished yet...
  load 11 regA
  load 10 regB
  test_gte regA regB regC
  store regC 12
### Converting: jump_if_n0 s12 print_array_end_3 #  ...and jump to end if so.
  load 12 regA
  jump_if_n0 regA print_array_end_3
### Converting: ar_get_idx a9 s11 s12   # Collect the value at the next index.
  load 9 regA
  load 11 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 12
### Converting: out_char s12            # Print this entry!
  load 12 regA
  out_char regA
### Converting: add s11 1 s11           # Increment to the next index.
  load 11 regA
  add regA 1 regC
  store regC 11
### Converting: jump print_array_start_2 
  jump print_array_start_2
print_array_end_3: 
### Converting: val_copy 0 s14          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 14
### Converting: ar_get_siz a1 s13       # Save size of array into variable.
  load 1 regA
  load regA regB
  store regB 13
print_array_start_4: 
### Converting: test_gte s14 s13 s15    # Test if we are finished yet...
  load 14 regA
  load 13 regB
  test_gte regA regB regC
  store regC 15
### Converting: jump_if_n0 s15 print_array_end_5 #  ...and jump to end if so.
  load 15 regA
  jump_if_n0 regA print_array_end_5
### Converting: ar_get_idx a1 s14 s15   # Collect the value at the next index.
  load 1 regA
  load 14 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 15
### Converting: out_char s15            # Print this entry!
  load 15 regA
  out_char regA
### Converting: add s14 1 s14           # Increment to the next index.
  load 14 regA
  add regA 1 regC
  store regC 14
### Converting: jump print_array_start_4 
  jump print_array_start_4
print_array_end_5: 
### Converting: out_char '\n'           # End print statements with a newline.
  out_char '\n'
### Converting: val_copy 0 s16 
  val_copy 0 regB
  store regB 16
### Converting: val_copy s16 s2 
  load 16 regA
  val_copy regA regB
  store regB 2
### Converting: val_copy 0 s17 
  val_copy 0 regB
  store regB 17
### Converting: val_copy s17 s3 
  load 17 regA
  val_copy regA regB
  store regB 3
while_start_6: 
### Converting: ar_get_siz a1 s18 
  load 1 regA
  load regA regB
  store regB 18
### Converting: test_less s2 s18 s19 
  load 2 regA
  load 18 regB
  test_less regA regB regC
  store regC 19
### Converting: jump_if_0 s19 while_end_7 
  load 19 regA
  jump_if_0 regA while_end_7
### Converting: ar_get_idx a1 s2 s20 
  load 1 regA
  load 2 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 20
### Converting: val_copy s20 s4 
  load 20 regA
  val_copy regA regB
  store regB 4
### Converting: val_copy 'a' s21 
  val_copy 'a' regB
  store regB 21
### Converting: test_gte s4 s21 s22 
  load 4 regA
  load 21 regB
  test_gte regA regB regC
  store regC 22
### Converting: test_nequ s22 0 s23 
### Converting: jump_if_0 s23 end_bool_10 # AND!
  load 23 regA
  jump_if_0 regA end_bool_10
### Converting: val_copy 'z' s24 
  val_copy 'z' regB
  store regB 24
### Converting: test_lte s4 s24 s25 
  load 4 regA
  load 24 regB
  test_lte regA regB regC
  store regC 25
### Converting: test_nequ s25 0 s23 
end_bool_10: 
### Converting: test_nequ s23 0 s26 
### Converting: jump_if_n0 s26 end_bool_11 # OR!
  load 26 regA
  jump_if_n0 regA end_bool_11
### Converting: val_copy 'A' s27 
  val_copy 'A' regB
  store regB 27
### Converting: test_gte s4 s27 s28 
  load 4 regA
  load 27 regB
  test_gte regA regB regC
  store regC 28
### Converting: test_nequ s28 0 s29 
### Converting: jump_if_0 s29 end_bool_12 # AND!
  load 29 regA
  jump_if_0 regA end_bool_12
### Converting: val_copy 'Z' s30 
  val_copy 'Z' regB
  store regB 30
### Converting: test_lte s4 s30 s31 
  load 4 regA
  load 30 regB
  test_lte regA regB regC
  store regC 31
### Converting: test_nequ s31 0 s29 
end_bool_12: 
### Converting: test_nequ s29 0 s26 
end_bool_11: 
### Converting: jump_if_0 s26 if_else_8 
  load 26 regA
  jump_if_0 regA if_else_8
### Converting: ar_get_idx a1 s3 s32 
  load 1 regA
  load 3 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 32
### Converting: ar_set_idx a1 s3 s4 
  load 1 regA
  load 3 regB
  load 4 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 1 s33 
  val_copy 1 regB
  store regB 33
### Converting: add s3 s33 s34 
  load 3 regA
  load 33 regB
  add regA regB regC
  store regC 34
### Converting: val_copy s34 s3 
  load 34 regA
  val_copy regA regB
  store regB 3
### Converting: jump if_end_9 
  jump if_end_9
if_else_8: 
if_end_9: 
### Converting: val_copy 1 s35 
  val_copy 1 regB
  store regB 35
### Converting: add s2 s35 s36 
  load 2 regA
  load 35 regB
  add regA regB regC
  store regC 36
### Converting: val_copy s36 s2 
  load 36 regA
  val_copy regA regB
  store regB 2
### Converting: jump while_start_6 
  jump while_start_6
while_end_7: 
### Converting: ar_set_siz a1 s3 
  load 1 regA
  load 3 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_9
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_9
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_11
ar_resize_do_copy_9:
  load 0 regD                           # Set regD = free mem position
  store regD 1
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_10:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_11
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_10
ar_resize_end_11:
### Converting: ar_set_siz a38 14 
  load 38 regA
  val_copy 14 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_12
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_12
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_14
ar_resize_do_copy_12:
  load 0 regD                           # Set regD = free mem position
  store regD 38
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_13:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_14
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_13
ar_resize_end_14:
### Converting: ar_set_idx a38 0 'L' 
  load 38 regA
  val_copy 0 regB
  val_copy 'L' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 1 'e' 
  load 38 regA
  val_copy 1 regB
  val_copy 'e' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 2 't' 
  load 38 regA
  val_copy 2 regB
  val_copy 't' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 3 't' 
  load 38 regA
  val_copy 3 regB
  val_copy 't' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 4 'e' 
  load 38 regA
  val_copy 4 regB
  val_copy 'e' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 5 'r' 
  load 38 regA
  val_copy 5 regB
  val_copy 'r' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 6 's' 
  load 38 regA
  val_copy 6 regB
  val_copy 's' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 7 ' ' 
  load 38 regA
  val_copy 7 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 8 'o' 
  load 38 regA
  val_copy 8 regB
  val_copy 'o' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 9 'n' 
  load 38 regA
  val_copy 9 regB
  val_copy 'n' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 10 'l' 
  load 38 regA
  val_copy 10 regB
  val_copy 'l' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 11 'y' 
  load 38 regA
  val_copy 11 regB
  val_copy 'y' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 12 ':' 
  load 38 regA
  val_copy 12 regB
  val_copy ':' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a38 13 ' ' 
  load 38 regA
  val_copy 13 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 0 s40          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 40
### Converting: ar_get_siz a38 s39      # Save size of array into variable.
  load 38 regA
  load regA regB
  store regB 39
print_array_start_13: 
### Converting: test_gte s40 s39 s41    # Test if we are finished yet...
  load 40 regA
  load 39 regB
  test_gte regA regB regC
  store regC 41
### Converting: jump_if_n0 s41 print_array_end_14 #  ...and jump to end if so.
  load 41 regA
  jump_if_n0 regA print_array_end_14
### Converting: ar_get_idx a38 s40 s41  # Collect the value at the next index.
  load 38 regA
  load 40 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 41
### Converting: out_char s41            # Print this entry!
  load 41 regA
  out_char regA
### Converting: add s40 1 s40           # Increment to the next index.
  load 40 regA
  add regA 1 regC
  store regC 40
### Converting: jump print_array_start_13 
  jump print_array_start_13
print_array_end_14: 
### Converting: val_copy 0 s43          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 43
### Converting: ar_get_siz a1 s42       # Save size of array into variable.
  load 1 regA
  load regA regB
  store regB 42
print_array_start_15: 
### Converting: test_gte s43 s42 s44    # Test if we are finished yet...
  load 43 regA
  load 42 regB
  test_gte regA regB regC
  store regC 44
### Converting: jump_if_n0 s44 print_array_end_16 #  ...and jump to end if so.
  load 44 regA
  jump_if_n0 regA print_array_end_16
### Converting: ar_get_idx a1 s43 s44   # Collect the value at the next index.
  load 1 regA
  load 43 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 44
### Converting: out_char s44            # Print this entry!
  load 44 regA
  out_char regA
### Converting: add s43 1 s43           # Increment to the next index.
  load 43 regA
  add regA 1 regC
  store regC 43
### Converting: jump print_array_start_15 
  jump print_array_start_15
print_array_end_16: 
### Converting: out_char '\n'           # End print statements with a newline.
  out_char '\n'
