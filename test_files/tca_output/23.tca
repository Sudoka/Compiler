  store 46 0
### Converting: val_copy 3000 s9 
  val_copy 3000 regB
  store regB 9
### Converting: val_copy s9 s1 
  load 9 regA
  val_copy regA regB
  store regB 1
### Converting: val_copy 10 s10 
  val_copy 10 regB
  store regB 10
### Converting: val_copy s10 s2 
  load 10 regA
  val_copy regA regB
  store regB 2
### Converting: ar_set_siz a3 s2 
  load 3 regA
  load 2 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_0
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_0
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_2
ar_resize_do_copy_0:
  load 0 regD                           # Set regD = free mem position
  store regD 3
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_1:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_2
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_1
ar_resize_end_2:
while_start_0: 
### Converting: val_copy 0 s12 
  val_copy 0 regB
  store regB 12
### Converting: test_gtr s1 s12 s13 
  load 1 regA
  load 12 regB
  test_gtr regA regB regC
  store regC 13
### Converting: jump_if_0 s13 while_end_1 
  load 13 regA
  jump_if_0 regA while_end_1
### Converting: val_copy 0 s14 
  val_copy 0 regB
  store regB 14
### Converting: val_copy s14 s4 
  load 14 regA
  val_copy regA regB
  store regB 4
### Converting: val_copy 10 s15 
  val_copy 10 regB
  store regB 15
### Converting: val_copy s15 s5 
  load 15 regA
  val_copy regA regB
  store regB 5
### Converting: val_copy 1000 s16 
  val_copy 1000 regB
  store regB 16
### Converting: val_copy s16 s6 
  load 16 regA
  val_copy regA regB
  store regB 6
### Converting: mult s5 s6 s17 
  load 5 regA
  load 6 regB
  mult regA regB regC
  store regC 17
### Converting: div s17 s2 s18 
  load 17 regA
  load 2 regB
  div regA regB regC
  store regC 18
### Converting: val_copy s18 s7 
  load 18 regA
  val_copy regA regB
  store regB 7
while_start_2: 
### Converting: val_copy 0 s19 
  val_copy 0 regB
  store regB 19
### Converting: test_gtr s5 s19 s20 
  load 5 regA
  load 19 regB
  test_gtr regA regB regC
  store regC 20
### Converting: jump_if_0 s20 while_end_3 
  load 20 regA
  jump_if_0 regA while_end_3
### Converting: random s6 s21 
  load 6 regA
  random regA regB
  store regB 21
### Converting: add s4 s21 s22 
  load 4 regA
  load 21 regB
  add regA regB regC
  store regC 22
### Converting: val_copy s22 s4 
  load 22 regA
  val_copy regA regB
  store regB 4
### Converting: val_copy 1 s23 
  val_copy 1 regB
  store regB 23
### Converting: sub s5 s23 s24 
  load 5 regA
  load 23 regB
  sub regA regB regC
  store regC 24
### Converting: val_copy s24 s5 
  load 24 regA
  val_copy regA regB
  store regB 5
### Converting: jump while_start_2 
  jump while_start_2
while_end_3: 
### Converting: div s4 s7 s25 
  load 4 regA
  load 7 regB
  div regA regB regC
  store regC 25
### Converting: val_copy s25 s4 
  load 25 regA
  val_copy regA regB
  store regB 4
### Converting: ar_get_idx a3 s4 s26 
  load 3 regA
  load 4 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 26
### Converting: ar_get_idx a3 s4 s27 
  load 3 regA
  load 4 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 27
### Converting: val_copy 1 s28 
  val_copy 1 regB
  store regB 28
### Converting: add s27 s28 s29 
  load 27 regA
  load 28 regB
  add regA regB regC
  store regC 29
### Converting: ar_set_idx a3 s4 s29 
  load 3 regA
  load 4 regB
  load 29 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 1 s30 
  val_copy 1 regB
  store regB 30
### Converting: sub s1 s30 s31 
  load 1 regA
  load 30 regB
  sub regA regB regC
  store regC 31
### Converting: val_copy s31 s1 
  load 31 regA
  val_copy regA regB
  store regB 1
### Converting: jump while_start_0 
  jump while_start_0
while_end_1: 
### Converting: val_copy 0 s32 
  val_copy 0 regB
  store regB 32
### Converting: val_copy s32 s8 
  load 32 regA
  val_copy regA regB
  store regB 8
while_start_4: 
### Converting: ar_get_siz a3 s33 
  load 3 regA
  load regA regB
  store regB 33
### Converting: test_less s8 s33 s34 
  load 8 regA
  load 33 regB
  test_less regA regB regC
  store regC 34
### Converting: jump_if_0 s34 while_end_5 
  load 34 regA
  jump_if_0 regA while_end_5
### Converting: ar_set_siz a35 11 
  load 35 regA
  val_copy 11 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_3
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_3
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_5
ar_resize_do_copy_3:
  load 0 regD                           # Set regD = free mem position
  store regD 35
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_4:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_5
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_4
ar_resize_end_5:
### Converting: ar_set_idx a35 0 'b' 
  load 35 regA
  val_copy 0 regB
  val_copy 'b' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a35 1 'i' 
  load 35 regA
  val_copy 1 regB
  val_copy 'i' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a35 2 'n' 
  load 35 regA
  val_copy 2 regB
  val_copy 'n' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a35 3 '_' 
  load 35 regA
  val_copy 3 regB
  val_copy '_' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a35 4 'c' 
  load 35 regA
  val_copy 4 regB
  val_copy 'c' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a35 5 'o' 
  load 35 regA
  val_copy 5 regB
  val_copy 'o' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a35 6 'u' 
  load 35 regA
  val_copy 6 regB
  val_copy 'u' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a35 7 'n' 
  load 35 regA
  val_copy 7 regB
  val_copy 'n' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a35 8 't' 
  load 35 regA
  val_copy 8 regB
  val_copy 't' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a35 9 's' 
  load 35 regA
  val_copy 9 regB
  val_copy 's' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a35 10 '[' 
  load 35 regA
  val_copy 10 regB
  val_copy '[' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 0 s37          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 37
### Converting: ar_get_siz a35 s36      # Save size of array into variable.
  load 35 regA
  load regA regB
  store regB 36
print_array_start_6: 
### Converting: test_gte s37 s36 s38    # Test if we are finished yet...
  load 37 regA
  load 36 regB
  test_gte regA regB regC
  store regC 38
### Converting: jump_if_n0 s38 print_array_end_7 #  ...and jump to end if so.
  load 38 regA
  jump_if_n0 regA print_array_end_7
### Converting: ar_get_idx a35 s37 s38  # Collect the value at the next index.
  load 35 regA
  load 37 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 38
### Converting: out_char s38            # Print this entry!
  load 38 regA
  out_char regA
### Converting: add s37 1 s37           # Increment to the next index.
  load 37 regA
  add regA 1 regC
  store regC 37
### Converting: jump print_array_start_6 
  jump print_array_start_6
print_array_end_7: 
### Converting: out_int s8 
  load 8 regA
  out_int regA
### Converting: ar_set_siz a39 4 
  load 39 regA
  val_copy 4 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_6
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_6
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_8
ar_resize_do_copy_6:
  load 0 regD                           # Set regD = free mem position
  store regD 39
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_7:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_8
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_7
ar_resize_end_8:
### Converting: ar_set_idx a39 0 ']' 
  load 39 regA
  val_copy 0 regB
  val_copy ']' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a39 1 ' ' 
  load 39 regA
  val_copy 1 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a39 2 '=' 
  load 39 regA
  val_copy 2 regB
  val_copy '=' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a39 3 ' ' 
  load 39 regA
  val_copy 3 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 0 s41          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 41
### Converting: ar_get_siz a39 s40      # Save size of array into variable.
  load 39 regA
  load regA regB
  store regB 40
print_array_start_8: 
### Converting: test_gte s41 s40 s42    # Test if we are finished yet...
  load 41 regA
  load 40 regB
  test_gte regA regB regC
  store regC 42
### Converting: jump_if_n0 s42 print_array_end_9 #  ...and jump to end if so.
  load 42 regA
  jump_if_n0 regA print_array_end_9
### Converting: ar_get_idx a39 s41 s42  # Collect the value at the next index.
  load 39 regA
  load 41 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 42
### Converting: out_char s42            # Print this entry!
  load 42 regA
  out_char regA
### Converting: add s41 1 s41           # Increment to the next index.
  load 41 regA
  add regA 1 regC
  store regC 41
### Converting: jump print_array_start_8 
  jump print_array_start_8
print_array_end_9: 
### Converting: ar_get_idx a3 s8 s43 
  load 3 regA
  load 8 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 43
### Converting: out_int s43 
  load 43 regA
  out_int regA
### Converting: out_char '\n'           # End print statements with a newline.
  out_char '\n'
### Converting: val_copy 1 s44 
  val_copy 1 regB
  store regB 44
### Converting: add s8 s44 s45 
  load 8 regA
  load 44 regB
  add regA regB regC
  store regC 45
### Converting: val_copy s45 s8 
  load 45 regA
  val_copy regA regB
  store regB 8
### Converting: jump while_start_4 
  jump while_start_4
while_end_5: 
