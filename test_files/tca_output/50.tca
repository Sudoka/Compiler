  store 32 0
### Converting: val_copy 4 s6 
  val_copy 4 regB
  store regB 6
### Converting: ar_set_siz a1 s6 
  load 1 regA
  load 6 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_0
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_0
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_2
ar_resize_do_copy_0:
  load 0 regD                           # Set regD = free mem position
  store regD 1
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_1:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_2
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_1
ar_resize_end_2:
### Converting: val_copy 0 s7 
  val_copy 0 regB
  store regB 7
### Converting: ar_get_idx a1 s7 s8 
  load 1 regA
  load 7 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 8
### Converting: val_copy 15 s9 
  val_copy 15 regB
  store regB 9
### Converting: ar_set_idx a1 s7 s9 
  load 1 regA
  load 7 regB
  load 9 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 1 s10 
  val_copy 1 regB
  store regB 10
### Converting: ar_get_idx a1 s10 s11 
  load 1 regA
  load 10 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 11
### Converting: val_copy 36 s12 
  val_copy 36 regB
  store regB 12
### Converting: ar_set_idx a1 s10 s12 
  load 1 regA
  load 10 regB
  load 12 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 2 s13 
  val_copy 2 regB
  store regB 13
### Converting: ar_get_idx a1 s13 s14 
  load 1 regA
  load 13 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 14
### Converting: val_copy 25 s15 
  val_copy 25 regB
  store regB 15
### Converting: ar_set_idx a1 s13 s15 
  load 1 regA
  load 13 regB
  load 15 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 3 s16 
  val_copy 3 regB
  store regB 16
### Converting: ar_get_idx a1 s16 s17 
  load 1 regA
  load 16 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 17
### Converting: val_copy 29 s18 
  val_copy 29 regB
  store regB 18
### Converting: ar_set_idx a1 s16 s18 
  load 1 regA
  load 16 regB
  load 18 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_siz a19 38 
  load 19 regA
  val_copy 38 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_3
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_3
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_5
ar_resize_do_copy_3:
  load 0 regD                           # Set regD = free mem position
  store regD 19
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_4:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_5
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_4
ar_resize_end_5:
### Converting: ar_set_idx a19 0 'T' 
  load 19 regA
  val_copy 0 regB
  val_copy 'T' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 1 'h' 
  load 19 regA
  val_copy 1 regB
  val_copy 'h' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 2 'i' 
  load 19 regA
  val_copy 2 regB
  val_copy 'i' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 3 's' 
  load 19 regA
  val_copy 3 regB
  val_copy 's' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 4 ' ' 
  load 19 regA
  val_copy 4 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 5 'i' 
  load 19 regA
  val_copy 5 regB
  val_copy 'i' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 6 's' 
  load 19 regA
  val_copy 6 regB
  val_copy 's' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 7 ' ' 
  load 19 regA
  val_copy 7 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 8 'a' 
  load 19 regA
  val_copy 8 regB
  val_copy 'a' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 9 ' ' 
  load 19 regA
  val_copy 9 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 10 's' 
  load 19 regA
  val_copy 10 regB
  val_copy 's' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 11 't' 
  load 19 regA
  val_copy 11 regB
  val_copy 't' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 12 'r' 
  load 19 regA
  val_copy 12 regB
  val_copy 'r' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 13 'i' 
  load 19 regA
  val_copy 13 regB
  val_copy 'i' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 14 'n' 
  load 19 regA
  val_copy 14 regB
  val_copy 'n' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 15 'g' 
  load 19 regA
  val_copy 15 regB
  val_copy 'g' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 16 ' ' 
  load 19 regA
  val_copy 16 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 17 'f' 
  load 19 regA
  val_copy 17 regB
  val_copy 'f' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 18 'o' 
  load 19 regA
  val_copy 18 regB
  val_copy 'o' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 19 'r' 
  load 19 regA
  val_copy 19 regB
  val_copy 'r' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 20 ' ' 
  load 19 regA
  val_copy 20 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 21 'u' 
  load 19 regA
  val_copy 21 regB
  val_copy 'u' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 22 's' 
  load 19 regA
  val_copy 22 regB
  val_copy 's' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 23 ' ' 
  load 19 regA
  val_copy 23 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 24 't' 
  load 19 regA
  val_copy 24 regB
  val_copy 't' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 25 'o' 
  load 19 regA
  val_copy 25 regB
  val_copy 'o' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 26 ' ' 
  load 19 regA
  val_copy 26 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 27 'i' 
  load 19 regA
  val_copy 27 regB
  val_copy 'i' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 28 'n' 
  load 19 regA
  val_copy 28 regB
  val_copy 'n' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 29 'd' 
  load 19 regA
  val_copy 29 regB
  val_copy 'd' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 30 'e' 
  load 19 regA
  val_copy 30 regB
  val_copy 'e' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 31 'x' 
  load 19 regA
  val_copy 31 regB
  val_copy 'x' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 32 ' ' 
  load 19 regA
  val_copy 32 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 33 'i' 
  load 19 regA
  val_copy 33 regB
  val_copy 'i' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 34 'n' 
  load 19 regA
  val_copy 34 regB
  val_copy 'n' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 35 't' 
  load 19 regA
  val_copy 35 regB
  val_copy 't' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 36 'o' 
  load 19 regA
  val_copy 36 regB
  val_copy 'o' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a19 37 '.' 
  load 19 regA
  val_copy 37 regB
  val_copy '.' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 0 s21          # Init loop variable for copying array.
  val_copy 0 regB
  store regB 21
### Converting: ar_get_siz a19 s20      # Save size of RHS array into variable.
  load 19 regA
  load regA regB
  store regB 20
### Converting: ar_set_siz a2 s20       # Make LHS same size as RHS.
  load 2 regA
  load 20 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_6
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_6
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_8
ar_resize_do_copy_6:
  load 0 regD                           # Set regD = free mem position
  store regD 2
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_7:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_8
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_7
ar_resize_end_8:
copy_array_start_0: 
### Converting: test_equ s21 s20 s22    # Test if we are finished yet...
  load 21 regA
  load 20 regB
  test_equ regA regB regC
  store regC 22
### Converting: jump_if_n0 s22 copy_array_end_1 #  ...and jump if we are.
  load 22 regA
  jump_if_n0 regA copy_array_end_1
### Converting: ar_get_idx a19 s21 s22  # Collect the value at next index.
  load 19 regA
  load 21 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 22
### Converting: ar_set_idx a2 s21 s22   # Write this entry to the LHS!
  load 2 regA
  load 21 regB
  load 22 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: add s21 1 s21           # Increment to the next index.
  load 21 regA
  add regA 1 regC
  store regC 21
### Converting: jump copy_array_start_0 #  ...and jump if not.
  jump copy_array_start_0
copy_array_end_1: 
### Converting: ar_get_siz a1 s24 
  load 1 regA
  load regA regB
  store regB 24
### Converting: ar_set_siz a3 s24 
  load 3 regA
  load 24 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_9
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_9
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_11
ar_resize_do_copy_9:
  load 0 regD                           # Set regD = free mem position
  store regD 3
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_10:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_11
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_10
ar_resize_end_11:
### Converting: val_copy 0 s25 
  val_copy 0 regB
  store regB 25
### Converting: val_copy s25 s4 
  load 25 regA
  val_copy regA regB
  store regB 4
while_start_2: 
### Converting: ar_get_siz a1 s26 
  load 1 regA
  load regA regB
  store regB 26
### Converting: test_less s4 s26 s27 
  load 4 regA
  load 26 regB
  test_less regA regB regC
  store regC 27
### Converting: jump_if_0 s27 while_end_3 
  load 27 regA
  jump_if_0 regA while_end_3
### Converting: ar_get_idx a1 s4 s28 
  load 1 regA
  load 4 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 28
### Converting: ar_get_idx a2 s28 s29 
  load 2 regA
  load 28 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 29
### Converting: out_char s29 
  load 29 regA
  out_char regA
### Converting: out_char '\n'           # End print statements with a newline.
  out_char '\n'
### Converting: val_copy 1 s30 
  val_copy 1 regB
  store regB 30
### Converting: add s4 s30 s31 
  load 4 regA
  load 30 regB
  add regA regB regC
  store regC 31
### Converting: val_copy s31 s4 
  load 31 regA
  val_copy regA regB
  store regB 4
### Converting: jump while_start_2 
  jump while_start_2
while_end_3: 
