  store 16 0
### Converting: val_copy 0 s2 
  val_copy 0 regB
  store regB 2
### Converting: val_copy s2 s1 
  load 2 regA
  val_copy regA regB
  store regB 1
while_start_0: 
### Converting: val_copy 30 s3 
  val_copy 30 regB
  store regB 3
### Converting: test_lte s1 s3 s4 
  load 1 regA
  load 3 regB
  test_lte regA regB regC
  store regC 4
### Converting: jump_if_0 s4 while_end_1 
  load 4 regA
  jump_if_0 regA while_end_1
### Converting: val_copy 3 s5 
  val_copy 3 regB
  store regB 5
### Converting: mod s1 s5 s6 
  load 1 regA
  load 5 regB
  mod regA regB regC
  store regC 6
### Converting: val_copy 0 s7 
  val_copy 0 regB
  store regB 7
### Converting: test_nequ s6 s7 s8 
  load 6 regA
  load 7 regB
  test_nequ regA regB regC
  store regC 8
### Converting: test_nequ s8 0 s9 
### Converting: jump_if_0 s9 end_bool_4 # AND!
  load 9 regA
  jump_if_0 regA end_bool_4
### Converting: val_copy 5 s10 
  val_copy 5 regB
  store regB 10
### Converting: mod s1 s10 s11 
  load 1 regA
  load 10 regB
  mod regA regB regC
  store regC 11
### Converting: val_copy 0 s12 
  val_copy 0 regB
  store regB 12
### Converting: test_nequ s11 s12 s13 
  load 11 regA
  load 12 regB
  test_nequ regA regB regC
  store regC 13
### Converting: test_nequ s13 0 s9 
end_bool_4: 
### Converting: jump_if_0 s9 if_else_2 
  load 9 regA
  jump_if_0 regA if_else_2
### Converting: out_int s1 
  load 1 regA
  out_int regA
### Converting: out_char '\n'           # End print statements with a newline.
  out_char '\n'
### Converting: jump if_end_3 
  jump if_end_3
if_else_2: 
if_end_3: 
### Converting: val_copy 1 s14 
  val_copy 1 regB
  store regB 14
### Converting: add s1 s14 s15 
  load 1 regA
  load 14 regB
  add regA regB regC
  store regC 15
### Converting: val_copy s15 s1 
  load 15 regA
  val_copy regA regB
  store regB 1
### Converting: jump while_start_0 
  jump while_start_0
while_end_1: 
