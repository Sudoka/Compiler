  store 31 0
### Converting: val_copy 10 s6 
  val_copy 10 regB
  store regB 6
### Converting: ar_set_siz a1 s6 
  load 1 regA
  load 6 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_0
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_0
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_2
ar_resize_do_copy_0:
  load 0 regD                           # Set regD = free mem position
  store regD 1
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_1:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_2
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_1
ar_resize_end_2:
### Converting: val_copy 21 s8 
  val_copy 21 regB
  store regB 8
### Converting: ar_set_siz a1 s8 
  load 1 regA
  load 8 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_3
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_3
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_5
ar_resize_do_copy_3:
  load 0 regD                           # Set regD = free mem position
  store regD 1
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_4:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_5
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_4
ar_resize_end_5:
### Converting: val_copy 23 s10 
  val_copy 23 regB
  store regB 10
### Converting: ar_set_siz a2 s10 
  load 2 regA
  load 10 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_6
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_6
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_8
ar_resize_do_copy_6:
  load 0 regD                           # Set regD = free mem position
  store regD 2
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_7:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_8
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_7
ar_resize_end_8:
### Converting: val_copy 25 s12 
  val_copy 25 regB
  store regB 12
### Converting: ar_set_siz a2 s12 
  load 2 regA
  load 12 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_9
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_9
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_11
ar_resize_do_copy_9:
  load 0 regD                           # Set regD = free mem position
  store regD 2
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_10:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_11
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_10
ar_resize_end_11:
### Converting: val_copy 20 s14 
  val_copy 20 regB
  store regB 14
### Converting: ar_set_siz a3 s14 
  load 3 regA
  load 14 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_12
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_12
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_14
ar_resize_do_copy_12:
  load 0 regD                           # Set regD = free mem position
  store regD 3
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_13:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_14
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_13
ar_resize_end_14:
### Converting: val_copy 30 s16 
  val_copy 30 regB
  store regB 16
### Converting: ar_set_siz a3 s16 
  load 3 regA
  load 16 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_15
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_15
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_17
ar_resize_do_copy_15:
  load 0 regD                           # Set regD = free mem position
  store regD 3
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_16:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_17
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_16
ar_resize_end_17:
### Converting: val_copy 0 s17 
  val_copy 0 regB
  store regB 17
### Converting: val_copy s17 s4 
  load 17 regA
  val_copy regA regB
  store regB 4
while_start_0: 
### Converting: ar_get_siz a1 s18 
  load 1 regA
  load regA regB
  store regB 18
### Converting: test_less s4 s18 s19 
  load 4 regA
  load 18 regB
  test_less regA regB regC
  store regC 19
### Converting: jump_if_0 s19 while_end_1 
  load 19 regA
  jump_if_0 regA while_end_1
### Converting: ar_get_idx a1 s4 s20 
  load 1 regA
  load 4 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 20
### Converting: val_copy '-' s21 
  val_copy '-' regB
  store regB 21
### Converting: ar_set_idx a1 s4 s21 
  load 1 regA
  load 4 regB
  load 21 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_siz a22 20 
  load 22 regA
  val_copy 20 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_18
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_18
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_20
ar_resize_do_copy_18:
  load 0 regD                           # Set regD = free mem position
  store regD 22
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_19:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_20
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_19
ar_resize_end_20:
### Converting: ar_set_idx a22 0 'H' 
  load 22 regA
  val_copy 0 regB
  val_copy 'H' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 1 'e' 
  load 22 regA
  val_copy 1 regB
  val_copy 'e' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 2 'l' 
  load 22 regA
  val_copy 2 regB
  val_copy 'l' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 3 'l' 
  load 22 regA
  val_copy 3 regB
  val_copy 'l' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 4 'o' 
  load 22 regA
  val_copy 4 regB
  val_copy 'o' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 5 ',' 
  load 22 regA
  val_copy 5 regB
  val_copy ',' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 6 ' ' 
  load 22 regA
  val_copy 6 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 7 'w' 
  load 22 regA
  val_copy 7 regB
  val_copy 'w' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 8 'o' 
  load 22 regA
  val_copy 8 regB
  val_copy 'o' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 9 'r' 
  load 22 regA
  val_copy 9 regB
  val_copy 'r' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 10 'l' 
  load 22 regA
  val_copy 10 regB
  val_copy 'l' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 11 'd' 
  load 22 regA
  val_copy 11 regB
  val_copy 'd' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 12 ',' 
  load 22 regA
  val_copy 12 regB
  val_copy ',' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 13 ' ' 
  load 22 regA
  val_copy 13 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 14 'I' 
  load 22 regA
  val_copy 14 regB
  val_copy 'I' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 15 ' ' 
  load 22 regA
  val_copy 15 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 16 'a' 
  load 22 regA
  val_copy 16 regB
  val_copy 'a' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 17 'm' 
  load 22 regA
  val_copy 17 regB
  val_copy 'm' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 18 ' ' 
  load 22 regA
  val_copy 18 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 19 '#' 
  load 22 regA
  val_copy 19 regB
  val_copy '#' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 0 s24          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 24
### Converting: ar_get_siz a22 s23      # Save size of array into variable.
  load 22 regA
  load regA regB
  store regB 23
print_array_start_2: 
### Converting: test_gte s24 s23 s25    # Test if we are finished yet...
  load 24 regA
  load 23 regB
  test_gte regA regB regC
  store regC 25
### Converting: jump_if_n0 s25 print_array_end_3 #  ...and jump to end if so.
  load 25 regA
  jump_if_n0 regA print_array_end_3
### Converting: ar_get_idx a22 s24 s25  # Collect the value at the next index.
  load 22 regA
  load 24 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 25
### Converting: out_char s25            # Print this entry!
  load 25 regA
  out_char regA
### Converting: add s24 1 s24           # Increment to the next index.
  load 24 regA
  add regA 1 regC
  store regC 24
### Converting: jump print_array_start_2 
  jump print_array_start_2
print_array_end_3: 
### Converting: out_int s4 
  load 4 regA
  out_int regA
### Converting: out_char '\n'           # End print statements with a newline.
  out_char '\n'
### Converting: val_copy 1 s26 
  val_copy 1 regB
  store regB 26
### Converting: add s4 s26 s27 
  load 4 regA
  load 26 regB
  add regA regB regC
  store regC 27
### Converting: val_copy s27 s4 
  load 27 regA
  val_copy regA regB
  store regB 4
### Converting: jump while_start_0 
  jump while_start_0
while_end_1: 
### Converting: val_copy 0 s29          # Init loop variable for printing array.
  val_copy 0 regB
  store regB 29
### Converting: ar_get_siz a1 s28       # Save size of array into variable.
  load 1 regA
  load regA regB
  store regB 28
print_array_start_4: 
### Converting: test_gte s29 s28 s30    # Test if we are finished yet...
  load 29 regA
  load 28 regB
  test_gte regA regB regC
  store regC 30
### Converting: jump_if_n0 s30 print_array_end_5 #  ...and jump to end if so.
  load 30 regA
  jump_if_n0 regA print_array_end_5
### Converting: ar_get_idx a1 s29 s30   # Collect the value at the next index.
  load 1 regA
  load 29 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 30
### Converting: out_char s30            # Print this entry!
  load 30 regA
  out_char regA
### Converting: add s29 1 s29           # Increment to the next index.
  load 29 regA
  add regA 1 regC
  store regC 29
### Converting: jump print_array_start_4 
  jump print_array_start_4
print_array_end_5: 
### Converting: out_char '\n'           # End print statements with a newline.
  out_char '\n'
