#=-=-= Ouput from Dr. Charles Ofria's sample compiler.
  store 31 0                            # Store next free memory at 0
### Converting: val_copy 10 s6
  val_copy 10 regB 
  store regB 6
### Converting: ar_set_siz a1 s6
  load 1 regA
  load 6 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_0    # Leave 0 size (nothing to copy) for uninitialized arrays.
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_0   # Jump to array copy if new size is bigger than old size.
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_2                  # Skip copying contents.
ar_resize_do_copy_0:
  load 0 regD                           # Set regD = free mem position
  store regD 1                          # Set indirect pointer to new mem pos.
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_1:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_2
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_1
ar_resize_end_2:
### Converting: val_copy 20 s8
  val_copy 20 regB 
  store regB 8
### Converting: ar_set_siz a1 s8
  load 1 regA
  load 8 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_3    # Leave 0 size (nothing to copy) for uninitialized arrays.
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_3   # Jump to array copy if new size is bigger than old size.
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_5                  # Skip copying contents.
ar_resize_do_copy_3:
  load 0 regD                           # Set regD = free mem position
  store regD 1                          # Set indirect pointer to new mem pos.
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_4:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_5
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_4
ar_resize_end_5:
### Converting: val_copy 23 s10
  val_copy 23 regB 
  store regB 10
### Converting: ar_set_siz a2 s10
  load 2 regA
  load 10 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_6    # Leave 0 size (nothing to copy) for uninitialized arrays.
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_6   # Jump to array copy if new size is bigger than old size.
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_8                  # Skip copying contents.
ar_resize_do_copy_6:
  load 0 regD                           # Set regD = free mem position
  store regD 2                          # Set indirect pointer to new mem pos.
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_7:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_8
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_7
ar_resize_end_8:
### Converting: val_copy 25 s12
  val_copy 25 regB 
  store regB 12
### Converting: ar_set_siz a2 s12
  load 2 regA
  load 12 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_9    # Leave 0 size (nothing to copy) for uninitialized arrays.
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_9   # Jump to array copy if new size is bigger than old size.
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_11                  # Skip copying contents.
ar_resize_do_copy_9:
  load 0 regD                           # Set regD = free mem position
  store regD 2                          # Set indirect pointer to new mem pos.
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_10:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_11
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_10
ar_resize_end_11:
### Converting: val_copy 20 s14
  val_copy 20 regB 
  store regB 14
### Converting: ar_set_siz a3 s14
  load 3 regA
  load 14 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_12    # Leave 0 size (nothing to copy) for uninitialized arrays.
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_12   # Jump to array copy if new size is bigger than old size.
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_14                  # Skip copying contents.
ar_resize_do_copy_12:
  load 0 regD                           # Set regD = free mem position
  store regD 3                          # Set indirect pointer to new mem pos.
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_13:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_14
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_13
ar_resize_end_14:
### Converting: val_copy 30 s16
  val_copy 30 regB 
  store regB 16
### Converting: ar_set_siz a3 s16
  load 3 regA
  load 16 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_15    # Leave 0 size (nothing to copy) for uninitialized arrays.
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_15   # Jump to array copy if new size is bigger than old size.
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_17                  # Skip copying contents.
ar_resize_do_copy_15:
  load 0 regD                           # Set regD = free mem position
  store regD 3                          # Set indirect pointer to new mem pos.
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_16:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_17
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_16
ar_resize_end_17:
### Converting: val_copy 0 s17
  val_copy 0 regB 
  store regB 17
### Converting: val_copy s17 s4
  load 17 regA
  val_copy regA regB 
  store regB 4
while_start_0:
### Converting: ar_get_siz a1 s18
  load 1 regA
  load regA regB
  store regB 18
### Converting: test_less s4 s18 s19
  load 4 regA
  load 18 regB
  test_less regA regB regC 
  store regC 19
### Converting: jump_if_0 s19 while_end_1
  load 19 regA
  jump_if_0 regA while_end_1 
### Converting: ar_get_idx a1 s4 s20
  load 1 regA
  load 4 regB
  add regA 1 regA
  add regA regB regA
  load regA regC
  store regC 20
### Converting: val_copy 'h' s21
  val_copy 'h' regB 
  store regB 21
### Converting: ar_set_idx a1 s4 s21
  load 1 regA
  load 4 regB
  load 21 regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_siz a22 13
  load 22 regA
  val_copy 13 regB
  val_copy 0 regC                       # Default old array size to 0 if uninitialized.
  jump_if_0 regA ar_resize_do_copy_18    # Leave 0 size (nothing to copy) for uninitialized arrays.
  load regA regC                        # Load old array size into regC
  test_gtr regB regC regD               # regD = new_size > old_size?
  jump_if_n0 regD ar_resize_do_copy_18   # Jump to array copy if new size is bigger than old size.
  store regB regA                       # Otherwise, replace old size w/ new size.  Done.
  jump ar_resize_end_20                  # Skip copying contents.
ar_resize_do_copy_18:
  load 0 regD                           # Set regD = free mem position
  store regD 22                          # Set indirect pointer to new mem pos.
  store regB regD                       # Store new size at new array start
  add regD 1 regE                       # Set regE = first pos. in new array
  add regE regB regE                    # Set regE = new free mem position
  store regE 0                          # Store new free memory at pos. zero
  add regA regC regE                    # Set regE = the last index to be copied
ar_resize_start_19:
  add regA 1 regA                       # Increment pointer for FROM array
  add regD 1 regD                       # Increment pointer for TO array
  test_gtr regA regE regF               # If we are done copying, jump to end of loop
  jump_if_n0 regF ar_resize_end_20
  mem_copy regA regD                    # Copy the current index.
  jump ar_resize_start_19
ar_resize_end_20:
### Converting: ar_set_idx a22 0 'h'
  load 22 regA
  val_copy 0 regB
  val_copy 'h' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 1 'e'
  load 22 regA
  val_copy 1 regB
  val_copy 'e' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 2 'l'
  load 22 regA
  val_copy 2 regB
  val_copy 'l' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 3 'l'
  load 22 regA
  val_copy 3 regB
  val_copy 'l' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 4 'o'
  load 22 regA
  val_copy 4 regB
  val_copy 'o' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 5 ' '
  load 22 regA
  val_copy 5 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 6 'h'
  load 22 regA
  val_copy 6 regB
  val_copy 'h' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 7 'u'
  load 22 regA
  val_copy 7 regB
  val_copy 'u' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 8 'm'
  load 22 regA
  val_copy 8 regB
  val_copy 'm' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 9 'a'
  load 22 regA
  val_copy 9 regB
  val_copy 'a' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 10 'n'
  load 22 regA
  val_copy 10 regB
  val_copy 'n' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 11 ' '
  load 22 regA
  val_copy 11 regB
  val_copy ' ' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: ar_set_idx a22 12 '#'
  load 22 regA
  val_copy 12 regB
  val_copy '#' regC
  add regA 1 regA
  add regA regB regA
  store regC regA
### Converting: val_copy 0 s24
  val_copy 0 regB                       # Init loop variable for printing array.
  store regB 24
### Converting: ar_get_siz a22 s23
  load 22 regA
  load regA regB                        # Save size of array into variable.
  store regB 23
print_array_start_2:
### Converting: test_gte s24 s23 s25
  load 24 regA
  load 23 regB
  test_gte regA regB regC               # Test if we are finished yet...
  store regC 25
### Converting: jump_if_n0 s25 print_array_end_3
  load 25 regA
  jump_if_n0 regA print_array_end_3     #  ...and jump to end if so.
### Converting: ar_get_idx a22 s24 s25
  load 22 regA
  load 24 regB
  add regA 1 regA
  add regA regB regA
  load regA regC# Collect the value at the next index.
  store regC 25
### Converting: out_char s25
  load 25 regA
  out_char regA                         # Print this entry!
### Converting: add s24 1 s24
  load 24 regA
  add regA 1 regC                       # Increment to the next index.
  store regC 24
### Converting: jump print_array_start_2
  jump print_array_start_2 
print_array_end_3:
### Converting: out_int s4
  load 4 regA
  out_int regA 
### Converting: out_char '\n'
  out_char '\n'                         # End print statements with a newline.
### Converting: val_copy 1 s26
  val_copy 1 regB 
  store regB 26
### Converting: add s4 s26 s27
  load 4 regA
  load 26 regB
  add regA regB regC 
  store regC 27
### Converting: val_copy s27 s4
  load 27 regA
  val_copy regA regB 
  store regB 4
### Converting: jump while_start_0
  jump while_start_0 
while_end_1:
### Converting: val_copy 0 s29
  val_copy 0 regB                       # Init loop variable for printing array.
  store regB 29
### Converting: ar_get_siz a1 s28
  load 1 regA
  load regA regB                        # Save size of array into variable.
  store regB 28
print_array_start_4:
### Converting: test_gte s29 s28 s30
  load 29 regA
  load 28 regB
  test_gte regA regB regC               # Test if we are finished yet...
  store regC 30
### Converting: jump_if_n0 s30 print_array_end_5
  load 30 regA
  jump_if_n0 regA print_array_end_5     #  ...and jump to end if so.
### Converting: ar_get_idx a1 s29 s30
  load 1 regA
  load 29 regB
  add regA 1 regA
  add regA regB regA
  load regA regC# Collect the value at the next index.
  store regC 30
### Converting: out_char s30
  load 30 regA
  out_char regA                         # Print this entry!
### Converting: add s29 1 s29
  load 29 regA
  add regA 1 regC                       # Increment to the next index.
  store regC 29
### Converting: jump print_array_start_4
  jump print_array_start_4 
print_array_end_5:
### Converting: out_char '\n'
  out_char '\n'                         # End print statements with a newline.
  
